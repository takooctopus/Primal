<ResourceDictionary x:Class="PrimalEditor.Dictionaries.ControlTemplates"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:PrimalEditor.Dictionaries"
                    xmlns:utl ="clr-namespace:PrimalEditor.Utilities.Controls">
    
    <!--设置textblock即我们说的label的样式-->
    <Style TargetType="{x:Type TextBlock}" x:Key="LightTextBlockStyle">
        <Setter Property="Foreground" Value="{StaticResource Editor.FontBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>
    
    <!--设置文本框的样式-->
    <Style TargetType="{x:Type TextBox}" x:Key="TextBoxStyle">
        <Setter Property="Foreground" Value="{StaticResource Editor.FontBrush}"/>
        <Setter Property="Background" Value="{StaticResource Editor.Window.GrayBrush2}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Editor.Window.GrayBrush4}"/>
        <Setter Property="SelectionBrush" Value="White"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="0,2"/>
    </Style>
    
    <!--设置文本框的输入事件，反正只要按了键盘就触发-->
    <Style TargetType="{x:Type TextBox}" x:Key="{x:Type TextBox}" BasedOn="{StaticResource TextBoxStyle}">
        <EventSetter Event="KeyDown" Handler="OnTextBox_KeyDown"/>
    </Style>
    
    <!--设施带输入的文本框+textBlock控件样式，具体的实现效果应该类似于win中的资源管理器对文件的重命名操作，试想一下我们缓慢双击资源管理器中的文件，会高亮显示出一个文件名的文本框，其中高亮全选了文件名，你可以对这个文件名进行设置，等到按下enter或者escape键进行重置。当然我们这里并不会这样做，毕竟我们只需要按下就行-->
    <!--基本样式就按照上面定义的TextBoxStyle-->
    <Style TargetType="{x:Type TextBox}" x:Key="TextBoxStyle_WithRename" BasedOn="{StaticResource TextBoxStyle}">
        <EventSetter Event="KeyDown" Handler="OnTextBoxRename_KeyDown"/>
        <EventSetter Event="LostFocus" Handler="OnTextBoxRename_LostFocus"/>
    </Style>
    
    <!--设置Open和Create的按钮样式-->
    <Style x:Key="SimpleButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource Editor.Window.GrayBrush3}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Editor.Window.GrayBrush5}"/>
        <Setter Property="Foreground" Value="{StaticResource Editor.FontBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Editor.Window.GrayBrush5}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--设置普通的按钮样式-->
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{StaticResource Editor.FontBrush}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background">
            <Setter.Value>
                <!--设置了一个从上到下的渐变色背景-->
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="{StaticResource Editor.Window.GrayColor5}" Offset="0"/>
                    <GradientStop Color="{StaticResource Editor.Window.GrayColor4}" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <!--设置了一个从上到下的渐变色背景-->
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="{StaticResource Editor.Window.GrayColor6}" Offset="0"/>
                    <GradientStop Color="{StaticResource Editor.Window.GrayColor2}" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource Editor.FontBrush}"/>
        <!--设置左右没有边沿，上下有，优化视觉效果更立体-->
        <Setter Property="BorderThickness" Value="0,1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5 3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="Button.Selected.OpacityBrush">
                            <LinearGradientBrush.GradientStops>
                                <GradientStop Color="White" Offset="0"/>
                                <GradientStop Color="#88ffffff" Offset="1"/>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>

                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="Button.Pressed.OpacityBrush">
                            <LinearGradientBrush.GradientStops>
                                <GradientStop Color="#88ffffff" Offset="0"/>
                                <GradientStop Color="White" Offset="1"/>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>

                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="Button.disabled.BackgroundBrush">
                            <LinearGradientBrush.GradientStops>
                                <GradientStop Color="{StaticResource Editor.Window.GrayColor4}" Offset="0"/>
                                <GradientStop Color="{StaticResource Editor.Window.GrayColor3}" Offset="1"/>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="Button.disabled.BorderBrush">
                            <LinearGradientBrush.GradientStops>
                                <GradientStop Color="{StaticResource Editor.Window.GrayColor5}" Offset="0"/>
                                <GradientStop Color="{StaticResource Editor.Window.GrayColor1}" Offset="1"/>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </ControlTemplate.Resources>

                    <Grid>
                        <!--设置了两个border来切换选中时的状态-->
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" CornerRadius="3"/>
                        <Border x:Name="borderSelected" SnapsToDevicePixels="True" CornerRadius="3" BorderThickness="0" BorderBrush="Transparent"/>
                        <!--可以看到 contentPresenter 在这里-->
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="Background" TargetName="borderSelected" Value="{StaticResource Editor.Selected.BackgroundBrush}"/>
                            <Setter Property="OpacityMask" TargetName="borderSelected" Value="{StaticResource Button.Selected.OpacityBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>
                            <Setter Property="Background" TargetName="borderSelected" Value="{StaticResource Editor.Selected.BackgroundBrush}"/>
                            <Setter Property="OpacityMask" TargetName="borderSelected" Value="{StaticResource Button.Selected.OpacityBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>
                            <Setter Property="Background" TargetName="borderSelected" Value="{StaticResource Editor.Selected.BackgroundBrush}"/>
                            <Setter Property="OpacityMask" TargetName="borderSelected" Value="{StaticResource Button.Pressed.OpacityBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Editor.Disabled.FontBrush}"/>
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.disabled.BackgroundBrush}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.disabled.BorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--修改ListBoxItem样式-->
    <!--对于ListBox我们还要同时修改ListBoxItem样式，但vs里面找不到，我们可以到C:\Program Files\Microsoft Visual Studio\2022\Community\DesignTools\SystemThemes\Wpf\aero2.normalcolor.xaml 里面去找对应的样式-->
    <Style TargetType="{x:Type ListBoxItem}" x:Key="ListBoxItemStyle">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,2,0,2" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        Padding="{TemplateBinding Padding}" 
                        SnapsToDevicePixels="true">
                        <ContentPresenter 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource Editor.Window.GrayBrush4}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource Editor.Selected.BackgroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{StaticResource Editor.Selected.BackgroundColor}" Opacity="0.5"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource Editor.Window.GrayBrush4}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{StaticResource Editor.Disabled.FontBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--对于ListBox我们还要同时修改ListBoxItem样式，但vs里面找不到，我们可以到C:\Program Files\Microsoft Visual Studio\2022\Community\DesignTools\SystemThemes\Wpf\aero2.normalcolor.xaml 里面去找对应的样式-->
    <Style TargetType="{x:Type ListBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemStyle}"/>
        <Setter Property="Background" Value="{StaticResource Editor.Window.GrayBrush2}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Editor.Window.GrayBrush4}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource Editor.FontBrush}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="1" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Selector.IsSelectionActive" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Editor.Selected.BackgroundBrush}"/>
                            </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Editor.Window.GrayBrush2}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Editor.Window.GrayBrush4}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Editor.Window.GrayBrush4}"/>

                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PrimalWindowStyle" TargetType="{x:Type Window}">
        <!--定义了BorderBrush和Background颜色用的灰蓝色和黑色，很漂亮-->
        <Setter Property="BorderBrush" Value="{StaticResource Editor.Selected.BackgroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource Editor.Window.GrayBrush1}"/>

        <!--设置Window Style: 1.取消圆角 2.设置缩放位置宽度为系统默认 3.设置边框厚度为0 4.标题栏厚度 5.将所有边框都设置成不属于客户端 6.不使用系统的按钮(最大最小关闭) -->
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome
                    CornerRadius="0"
                    ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}"
                    GlassFrameThickness="0"
                    CaptionHeight="20"
                    NonClientFrameEdges="None"
                    UseAeroCaptionButtons="False" 
                    /> 
            </Setter.Value>
        </Setter>
        
        <!--设置窗口模板-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <!--设置窗口边框颜色和窗口背景颜色-->
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Border.Style>
                            <Style TargetType="Border">
                                <!--设置边框的厚度为1-->
                                <Setter Property="BorderThickness" Value="1"/>
                                <Style.Triggers>
                                    <!--使用触发器，当窗口最大化时，将边框厚度设置成系统默认-->
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=WindowState}" Value="Maximized">
                                        <Setter Property="BorderThickness" Value="{Binding Source={x:Static SystemParameters.WindowResizeBorderThickness}}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>

                        <Grid>
                            <AdornerDecorator>
                                <ContentPresenter Margin="5,24,5,5"/>
                            </AdornerDecorator>
                            
                            <!--标题栏样式-->
                            <!--1.最上层 2.文字靠左 3.文字加粗 4.使用颜色 5.绑定程序名字-->
                            <!--1.右侧三个按钮-->
                            <DockPanel VerticalAlignment="Top" LastChildFill="False">
                                <DockPanel.Resources>
                                    <Style TargetType="Path">
                                        <Setter Property="Stroke" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                                        <Setter Property="StrokeThickness" Value="1"/>
                                    </Style>
                                    <!--这里使用了上面定义的SimpleButton样式-->
                                    <Style TargetType="Button" BasedOn="{StaticResource SimpleButton}">
                                        <Setter Property="Width" Value="24"/>
                                        <Setter Property="Height" Value="14"/>
                                        <Setter Property="Margin" Value="0,2,1,0"/>
                                        <Setter Property="VerticalAlignment" Value="Center"/>
                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                        <Setter Property="DockPanel.Dock" Value="Right"/>
                                        <!--允许在非客户区域的button可以使用点击事件-->
                                        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                                    </Style>
                                </DockPanel.Resources>
                                
                                <TextBlock Margin="5,2,0,0" VerticalAlignment="Center" DockPanel.Dock="Left" FontWeight="Bold"
                                           Foreground="{StaticResource Editor.FontBrush}"
                                           Text="{TemplateBinding Title}"/>

                                <Button x:Name="btnClose" Click="OnClose_Button_Click">
                                    <Button.Content>
                                        <Grid>
                                            <Path Data="M1,1.5L 8,8.5" Margin="0"/>
                                            <Path Data="M1,8.5L 8,1.5" Margin="0"/>
                                        </Grid>
                                    </Button.Content>
                                </Button>

                                <Button x:Name="btnRestore" Click="OnMaximizeRestore_Button_Click">
                                    <Button.Content>
                                        <Rectangle Stroke="{StaticResource Editor.FontBrush}" StrokeThickness="1"
                                                    Width="10" Height="8"/>
                                    </Button.Content>
                                </Button>
                                
                                <Button x:Name="btnMinimize" Click="OnMinimize_Button_Click">
                                    <Button.Content>
                                        <Rectangle Stroke="{StaticResource Editor.FontBrush}" StrokeThickness="1"
                                                    Width="10" Height="1" Margin="0,4,0,0"/>
                                    </Button.Content>
                                </Button>
                            </DockPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--类似于windowstyle[其实大部分是复制的]，设置dialogstyle-->
    <Style x:Key="PrimalDialogStyle" TargetType="{x:Type Window}">
        <!--定义了BorderBrush和Background颜色用的灰蓝色和黑色，很漂亮-->
        <Setter Property="BorderBrush" Value="{StaticResource Editor.Selected.BackgroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource Editor.Window.GrayBrush1}"/>

        <!--设置Window Style: 1.取消圆角 2.设置缩放位置宽度为系统默认 3.设置边框厚度为0 4.标题栏厚度 5.将所有边框都设置成不属于客户端 6.不使用系统的按钮(最大最小关闭) -->
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome
                    CornerRadius="0"
                    ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}"
                    GlassFrameThickness="0"
                    CaptionHeight="20"
                    NonClientFrameEdges="None"
                    UseAeroCaptionButtons="False" 
                    />
            </Setter.Value>
        </Setter>

        <!--设置窗口模板-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <!--设置窗口边框颜色和窗口背景颜色-->
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Border.Style>
                            <Style TargetType="Border">
                                <!--设置边框的厚度为1-->
                                <Setter Property="BorderThickness" Value="1"/>
                                <Style.Triggers>
                                    <!--使用触发器，当窗口最大化时，将边框厚度设置成系统默认-->
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=WindowState}" Value="Maximized">
                                        <Setter Property="BorderThickness" Value="{Binding Source={x:Static SystemParameters.WindowResizeBorderThickness}}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>

                        <Grid>
                            <AdornerDecorator>
                                <ContentPresenter Margin="5,24,5,5"/>
                            </AdornerDecorator>

                            <!--标题栏样式-->
                            <!--1.最上层 2.文字靠左 3.文字加粗 4.使用颜色 5.绑定程序名字-->
                            <!--1.右侧三个按钮-->
                            <DockPanel VerticalAlignment="Top" LastChildFill="False">
                                <DockPanel.Resources>
                                    <Style TargetType="Path">
                                        <Setter Property="Stroke" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
                                        <Setter Property="StrokeThickness" Value="1"/>
                                    </Style>
                                    <!--这里使用了上面定义的SimpleButton样式-->
                                    <Style TargetType="Button" BasedOn="{StaticResource SimpleButton}">
                                        <Setter Property="Width" Value="24"/>
                                        <Setter Property="Height" Value="14"/>
                                        <Setter Property="Margin" Value="0,2,1,0"/>
                                        <Setter Property="VerticalAlignment" Value="Top"/>
                                        <Setter Property="SnapsToDevicePixels" Value="True"/>
                                        <Setter Property="DockPanel.Dock" Value="Right"/>
                                        <!--允许在非客户区域的button可以使用点击事件-->
                                        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                                    </Style>
                                </DockPanel.Resources>

                                <TextBlock Margin="5,2,0,0" VerticalAlignment="Center" DockPanel.Dock="Left" FontWeight="Bold"
                                           Foreground="{StaticResource Editor.FontBrush}"
                                           Text="{TemplateBinding Title}"/>

                                <Button x:Name="btnClose" Click="OnClose_Button_Click">
                                    <Button.Content>
                                        <Grid>
                                            <Path Data="M1,1.5L 8,8.5" Margin="0"/>
                                            <Path Data="M1,8.5L 8,1.5" Margin="0"/>
                                        </Grid>
                                    </Button.Content>
                                </Button>

                            </DockPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--这个是显示数字的TextBox样式[其是两个组件复合，一个textblock和一个textbox，实现拖拽以改变数值大小，点击以激活文本框赋值，注意，并没有特别指示背景等样式]-->
    <Style TargetType="{x:Type utl:NumberBox}" x:Key="{x:Type utl:NumberBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type utl:NumberBox}">
                    <Grid>
                        <TextBlock x:Name="PART_textBlock" Text="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Cursor" Value="SizeWE"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <TextBox x:Name="PART_textBox" BorderThickness="0" Padding="0" Text="{Binding Value, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=Explicit}" Foreground="{TemplateBinding Foreground}" Visibility="Collapsed" Style="{StaticResource TextBoxStyle_WithRename}" HorizontalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--要是文本框变成可见，就把textblock变成不可见-->
                        <DataTrigger Binding="{Binding Visibility, ElementName=PART_textBox}" Value="Visible">
                            <Setter Property="Visibility" TargetName="PART_textBlock" Value="Collapsed"/>
                        </DataTrigger>
                        <!--对于混合文本值的样式处理，还应该记得吧，在GameEntity的MSEntity那边，混合类型的返回值为null-->
                        <DataTrigger Binding="{Binding Value, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter Property="Background" TargetName="PART_textBlock" Value="{StaticResource Editor.Disabled.FontBrush}"/>
                            <Setter Property="ToolTip" TargetName="PART_textBlock" Value="混合类型[Mixed Values]"/>
                            <Setter Property="MinWidth" TargetName="PART_textBlock" Value="20"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--基于NumberBox的标量显示盒，因为NumberBox只是一层基础的功能封装，定义了点击和拖动的特性，继承于NumberBox的ScalarBox在此基础上实现了一些样式的改变，比如鼠标滑动和不可用的事件样式[代码很多和下面VectorBox复用了]-->
    <Style TargetType="{x:Type utl:ScalarBox}" x:Key="{x:Type utl:ScalarBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{StaticResource Editor.FontBrush}"/>
        <Setter Property="Background" Value="{StaticResource Editor.Window.GrayBrush2}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Editor.Window.GrayBrush5}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="3000"/>
        <Setter Property="ToolTipService.BetweenShowDelay" Value="1000"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type utl:ScalarBox}">
                    <Border x:Name="border" SnapsToDevicePixels="True" Margin="0,2,0,3" Background="{TemplateBinding Background}" Padding="5,2" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="10" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="grid" MinWidth="50">
                            <TextBlock x:Name="PART_textBlock" Text="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Center">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Cursor" Value="SizeWE"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <TextBox x:Name="PART_textBox" BorderThickness="0" Padding="0" Text="{Binding Value, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=Explicit}" Foreground="{TemplateBinding Foreground}" Visibility="Collapsed" Style="{StaticResource TextBoxStyle_WithRename}" HorizontalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--要是鼠标划过就将边沿颜色加深-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Editor.Window.GrayBrush6}"/>
                        </Trigger>
                        <!--要是不可用，就将整个grid[当然grid在border里面透明度改为0.5，默认为1]-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.5"/>
                        </Trigger>
                        <!--要是文本框变成可见，就把textblock变成不可见-->
                        <DataTrigger Binding="{Binding Visibility, ElementName=PART_textBox}" Value="Visible">
                            <Setter Property="Visibility" TargetName="PART_textBlock" Value="Collapsed"/>
                        </DataTrigger>
                        <!--对于混合文本值的样式处理，还应该记得吧，在GameEntity的MSEntity那边，混合类型的返回值为null-->
                        <DataTrigger Binding="{Binding Value, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter Property="Background" TargetName="PART_textBlock" Value="{StaticResource Editor.Disabled.FontBrush}"/>
                            <Setter Property="ToolTip" TargetName="PART_textBlock" Value="混合类型[Mixed Values]"/>
                            <Setter Property="MinWidth" TargetName="PART_textBlock" Value="20"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
   
    <!--基于NumberBox的向量显示盒，主要是使用grid中封装几个NumberBox，使用Trigger来限定显示方式，实现组件的捆绑，以实现一组向量的同步绑定-->
    <Style TargetType="{x:Type utl:VectorBox}" x:Key="{x:Type utl:VectorBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="{StaticResource Editor.Window.GrayBrush2}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Editor.Window.GrayBrush5}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type utl:VectorBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type utl:NumberBox}" BasedOn="{StaticResource {x:Type utl:NumberBox}}">
                            <Setter Property="MinWidth" Value="50"/>
                            <Setter Property="ToolTipService.InitialShowDelay" Value="3000"/>
                            <Setter Property="ToolTipService.BetweenShowDelay" Value="1000"/>
                            <Setter Property="Multiplier" Value="{Binding Multiplier , RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Style>
                    </ControlTemplate.Resources>
                    <Border x:Name="border" SnapsToDevicePixels="True" Margin="0,2,0,3" Background="{TemplateBinding Background}" Padding="5,2" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="10" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="columnDefinition0"/>
                                <ColumnDefinition x:Name="columnDefinition1"/>
                                <ColumnDefinition x:Name="columnDefinition2"/>
                                <ColumnDefinition x:Name="columnDefinition3"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="rowDefinition0"/>
                                <RowDefinition x:Name="rowDefinition1"/>
                                <RowDefinition x:Name="rowDefinition2"/>
                                <RowDefinition x:Name="rowDefinition3"/>
                            </Grid.RowDefinitions>
                            
                            <utl:NumberBox x:Name="nbX" Foreground="{StaticResource Editor.RedBrush}" Value="{Binding X, RelativeSource={RelativeSource TemplatedParent}}" ToolTip="X value"/>
                            <utl:NumberBox x:Name="nbY" Foreground="{StaticResource Editor.GreenBrush}" Value="{Binding Y, RelativeSource={RelativeSource TemplatedParent}}" ToolTip="Y value"/>
                            <utl:NumberBox x:Name="nbZ" Foreground="{StaticResource Editor.BlueBrush}" Value="{Binding Z, RelativeSource={RelativeSource TemplatedParent}}" ToolTip="Z value"/>
                            <utl:NumberBox x:Name="nbW" Foreground="{StaticResource Editor.FontBrush}" Value="{Binding W, RelativeSource={RelativeSource TemplatedParent}}" ToolTip="W value" Visibility="Collapsed"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--纵向排列，分成4排，那么我们列宽度就设置成自动吧，讲道理这个列还是需要一列的-->
                        <DataTrigger Binding="{Binding Orientation, RelativeSource= {RelativeSource Self}}" Value="Vertical">
                            <Setter Property="Grid.Row" TargetName="nbX" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="nbY" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="nbZ" Value="2"/>
                            <Setter Property="Grid.Row" TargetName="nbW" Value="3"/>
                            <!--<Setter Property="Width" TargetName="columnDefinition0" Value="auto"/>-->
                            <Setter Property="Width" TargetName="columnDefinition1" Value="auto"/>
                            <Setter Property="Width" TargetName="columnDefinition2" Value="auto"/>
                            <Setter Property="Width" TargetName="columnDefinition3" Value="auto"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Orientation, RelativeSource= {RelativeSource Self}}" Value="Horizontal">
                            <Setter Property="Grid.Column" TargetName="nbX" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="nbY" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="nbZ" Value="2"/>
                            <Setter Property="Grid.Column" TargetName="nbW" Value="3"/>
                            <!--<Setter Property="Height" TargetName="rowDefinition0" Value="auto"/>-->
                            <Setter Property="Height" TargetName="rowDefinition1" Value="auto"/>
                            <Setter Property="Height" TargetName="rowDefinition2" Value="auto"/>
                            <Setter Property="Height" TargetName="rowDefinition3" Value="auto"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding VectorType, RelativeSource= {RelativeSource Self}}" Value="Vector2">
                            <Setter Property="Width" TargetName="columnDefinition2" Value="auto"/>
                            <Setter Property="Width" TargetName="columnDefinition3" Value="auto"/>
                            <Setter Property="Height" TargetName="rowDefinition2" Value="auto"/>
                            <Setter Property="Height" TargetName="rowDefinition3" Value="auto"/>
                            <Setter Property="Visibility" TargetName="nbZ" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="nbW" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding VectorType, RelativeSource= {RelativeSource Self}}" Value="Vector3">
                            <Setter Property="Width" TargetName="columnDefinition3" Value="auto"/>
                            <Setter Property="Height" TargetName="rowDefinition3" Value="auto"/>
                            <Setter Property="Visibility" TargetName="nbW" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding VectorType, RelativeSource= {RelativeSource Self}}" Value="Vector4">
                            <Setter Property="Visibility" TargetName="nbW" Value="Visible"/>
                        </DataTrigger>
                        <!--要是鼠标划过就将边沿颜色加深-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Editor.Window.GrayBrush6}"/>
                        </Trigger>
                        <!--要是不可用，就将整个grid[当然grid在border里面透明度改为0.5，默认为1]-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>